O que é Template Engine?
	- Uma forma de deixar o HTML dinâmico, inserindo variáveis do backend no frontend
	- Pode-se criar layouts, que são reaproveitados
	- Tem diversos disponíveis: EJS, Pug e Handlebars
Handlebars
	- Coloca-se os dados dinâmicos no HTML entre {{}} para serem impressos
	- Pode-se criar condicionais e também loops no template
	- Conhecido pela sua sintaxe limpa no front, forçando a não executar lógica no HTML
	- O nome do pacote é express-handlebars
	- app.engine('handlebars', exphbs()) [MUDAR PARA ->] app.engine('handlebars', exphbs.engine())
Instalando o Handlebars
	- npm init -y
	- Instalar o Express e o Handlebars, podendo utilizar o Nodemon (npm install nodemon express express-handlebars)
	"scripts": {
    		"test": "echo \"Error: no test specified\" && exit 1",
    		"start": "nodemon ./index.js localhost 3000"
  	},
	- No index.js importa os pacotes instalados e adiciona ao Express a engine do Handlebars
	- Cria uma view no diretório views, com a extensão handlebars
	- Utiliza-se o método render para enviar esta view para a requisição
	- npm start
Criando layouts
	- Layouts servem para reaproveitar código entre páginas
	- Cria-se uma pasta chamada layouts em views e nela cria-se o template (main.handlebars) que será repetido
	- Coloca-se uma tag especial {{{body}}} para que o 'corpo' seja inserido neste local e em todas as nossas views o layout será repetido
Passando dados para a view
	- Passa-se os dados por meio do método render
	- Envia-se um objeto com chaves e valores, possibilitando acessar estes dados no template
	- Utiliza-se a sintaxe de {{dado}}
Utilizando condicionais
	- Pode-se utilizar if no Handlebars, a sintaxe é {{#if algumacoisa}}...{{/if}}
	- Só imprime o que está entre as condicionais, se o resultado dela for verdadeiro
	- Precisa-se encaminhar o dado a ser validado pelo backend
	- O else é usado para exibição de outra parte d layout, caso a condição seja falsa
	- A sintaxe é: {{#if algumacoisa}}...{{else}}...{{/if}}
Estrutura de repetição
	- Operador each, sintaxe é: {{#each}}...{{/each}}
	- Em um array pode-se chamar os itens com: {{this}}, então cada um dos itens é acessado na view
Utilizando o with
	- With permite abstrair um objeto, ou seja, pode-se acessar as propriedades sem nos referenciarmos sempre ao objeto antes
	- A sintaxe é: {{#with objeto}}...{{/with}}
Conhecendo os partials
	- Os partials são como mini templates, que precisam ser repetidos em diversos locais da aplicação
	- Os partials geralmente ficam em views/partials
	- Utiliza-se a sintaxe: {{> partial}} para chamá-lo no projeto
CSS com Handlebars e Express
	- Define-se a pasta dos arquivos estáticos
	- Linka-se o CSS com o nosso layout em comum para todas as páginas
