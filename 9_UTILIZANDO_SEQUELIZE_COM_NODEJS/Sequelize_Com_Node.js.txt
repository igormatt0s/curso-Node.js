O que é ORM?
    - Object Relational Mapper (ORM)
    - Abstrai a complexidade das queries, para trabalharmos com métodos
    - Nos concentramos na regra de negócios e não nos comandos SQL
    - Uma ORM muito utilizada para Node.js é a Sequelize
    - Em alguns casos uma ORM pode trazer prejuízos de performance
    - A query pura executa mais rapidamente do que a ORM
    - E temos código "gerado", ou seja, não vemos por baixo dos panos
O que é Sequelize?
    - Uma ORM para Node.js
    - Ela é baseada em promises (then, catch)
    - Tem integração para vários bancos relacionais, como o MySQL
    - Precisamos sempre criar um Model, que é o reflexo da nossa tabela em uma classe
    - Precisamos instalar o pacote, já que é um módulo externo
Instalando o Sequelize
    - Para instalar o Sequelize utilizamos o pacote sequelize e o mysql2 "npm install sequelize mysql2"
    - E para conectar precisamos passar os mesmos dados que no outro pacote: banco, usuário e senha
    - Instanciando a classe Sequelize
    - É possível checar a conexão com o método authenticate
Criando um Model
    - Para criar um Model temos que instanciar uma classe que representará uma tabela
    - Um Model User cria uma nova tabela chamada users
    - Colocamos os campos e os tipos dele como propriedades do Model
    - Futuramente ele será utilizado para as operações entre aplicação e banco
    - O método sync faz a criação das tabelas baseada nos models
    - O sequelize cria automaticamente a coluna ID, CreatedAt (data de criação) e UpdatedAt (data de atualização)
Inserindo dados
    - Para inserir um dado vamos precisar do Model que criamos, ou seja, importar ele no arquivo de execução do comandos
    - O método a ser utilizado é o create
    - Ele leva como parâmetro todos os campor, e insere o registro na tabela
Lendo dados
    - Para ler os dados de uma tabela vamos utilizar o método fetchAll
    - Que também requer o model, n o nosso caso o User
    - Os dados vem em um objeto especial, para transformar em um array de objetos temos que inserir um parâmetro
    - Que é o raw como true
Utilizando o Where
    - Para filtrar dados com o Sequelize utilizando o WHERE, precisamos inserir um novo parâmetro
    - Que será o where, um objeto onde colocamos as propriedades e valores que queremos filtrar
    - E para retornar apenas um resultado podemos utilizar o método findOne
Removendo itens
    - Para remover itens utilizando o método destroy
    - A função vai ficar bem parecida com a de resgatar um usuário
    - Só que será um POST, e que efetua a remoção, depois redirecionamos
    - Precisamos também criar um formulário no front-end
Editando itens
    - O primeiro passo da edição é resgatar os dados do item
    - Com isso podemos preencher o formulario, para depois fazer o UPDATE
    - Vamos utilizar o método findOne, igual na rota de visualização
    - E fazer o preenchimento do form na nossa nova view
    - Para realizar a query de UPDATE vamos utilizar o método update do Sequelize
    - Nele passamos o objeto atualizado do item
    - E também filtramos por meio do atributo where, que item vamos atualizar
Refazer as tabelas
    - Podemosforçar a reconstrução das tabelas
    - No método sync, onde são sincronizados os models e as tabelas
    - Vamos colocar um atributo: force como true
    - Exemplo: sync({ force: true })
    - Note que os dados são perdidos neste processo
Relacionamentos
    - Em bancos relacionais podemos criar relacionamentos entre as tabelas
    - Para concretizar isso no Sequelize vamos precisar de dois Models, ou seja, precisamos criar mais um no nosso projeto
    - Depois precisamos inserir um método de relacionamento em algum dos models que vai criar a relação
    - Após o sync uma coluna que faz a relação entre as tabelas será criada (ex: UserId na tabela addresses)
    - Que representa a FOREIGN KEY
Adicionando dado relacionado
    - Para adicionar o dado relacionado o fluxo é quase o mesmo
    - O grande detalhe é que precisamos passar o id do item que o relaciona
    - Podemos fazer com um input do tipo hidden
    - Dentro do form que contém os dados do novo item
    - E enviando para uma nova rota no nosso sistema
Resgatndo dados relacionados
    - Precisamos definir as relações entre os dois Models, podemos fazer isso no Model de endereços
    - Depois basta utilizar o operador include com o nome do Model, onde estamos resgatando o dado
    - Isso faz com que os registros associados também venham na seleção
    - Como há dados relacionados, precisamos remover o raw
Removendo dados relacionados
    - Para remover itens relacionado utilizamos o mesmo processo de remoção de itens
    - Criamos um formulário que envia o id do item
    - E uma rota para receber estas informações e executar a remoção utilizando o método destroy